plugins {
    id 'org.springframework.boot' version '2.2.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "org.sonarqube" version "2.7.1"
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'java'
    id 'idea'
}

group 'com.gig'
version '1.0-SNAPSHOT'

/**
 * querydsl 버전.
 */
ext.querydslVersion = '4.3.1'

ext["hibernate.version"] = "5.4.5.Final"

sourceCompatibility = JavaVersion.VERSION_11

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url "https://plugins.gradle.org/m2/" } // 플러그인 저장소
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {

        /**
         * Spring
         */
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-devtools'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.security:spring-security-oauth2-client'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

        /**
         * DB
         */
        runtimeOnly 'com.h2database:h2'
        compile 'mysql:mysql-connector-java'

        /**
         * lombok
         */
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        /**
         * Thymeleaf
         */
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
        implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'


        /**
         * Etc
         */
        implementation 'joda-time:joda-time'
        implementation 'org.jadira.usertype:usertype.core:6.0.1.GA'
        implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20190325.1'
        implementation 'org.apache.commons:commons-lang3:3.7'
        implementation "org.apache.commons:commons-text:1.6"
        implementation "org.apache.commons:commons-compress:1.18"
        implementation 'com.googlecode.json-simple:json-simple:1.1'
        implementation 'org.modelmapper:modelmapper:2.3.6'
        compile group: 'commons-codec', name: 'commons-codec', version: '1.5'
        compile group: 'com.mortennobel', name: 'java-image-scaling', version: '0.8.5'

        /**
         * File
         */
        implementation 'com.google.code.gson:gson:2.8.2'
        implementation 'commons-fileupload:commons-fileupload:1.4'
        implementation 'org.apache.tika:tika-core:1.18'

        /**
         * AWS
         */
        implementation 'com.amazonaws:aws-java-sdk-s3:1.11.228'
        implementation 'com.amazonaws:aws-java-sdk-ses:1.11.228'

        /**
         * Test
         */
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        testImplementation("org.junit.vintage:junit-vintage-engine") {
            exclude group: "org.hamcrest", module: "hamcrest-core"
        }
    }
}

test {
    useJUnitPlatform()
}

project(":platform-site-core") {
    version = '0.1.0'

    bootJar.enabled = false
    jar.enabled = true
}

project(':platform-app-admin') {

    apply plugin: 'war'
    version = '0.1.0'

    bootWar.enabled = false
    war.enabled = true

    war {
        archivesBaseName = "admin"
        archiveFileName = "ROOT.war"
    }

    dependencies {
        compile project(':platform-site-core')
        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    }
}

project(':platform-app-api') {

    apply plugin: 'war'
    version = '0.1.0'

    bootWar.enabled = false
    war.enabled = true

    war {
        archivesBaseName = "web"
        archiveFileName = "ROOT.war"
    }

    dependencies {
        compile project(':platform-site-core')
        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    }
}


def querydslProjects = [
        project(':platform-site-core')
]

/**
 * QueryDsl
 */
configure(querydslProjects) {

    //https://github.com/ewerk/gradle-plugins/tree/master/querydsl-plugin

    apply plugin: "io.spring.dependency-management"

    /**
     * 생성될 Q-클래스 경로.
     */
    def querydslDir = "$buildDir/generated/querydsl"

    /**
     * querydsl 의존성.
     * annotation processor 설정.
     */
    dependencies {
        implementation "com.querydsl:querydsl-jpa:${querydslVersion}"
        implementation "com.querydsl:querydsl-sql:${querydslVersion}"
        annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
        annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
        annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jpa"  /*Q-클래스 생성.*/
    }

    /**
     * 생성될 Q-클래스 경로 등록
     */
    sourceSets {
        main.java.srcDir querydslDir
    }
    compileJava{
        options.incremental = true
        options.annotationProcessorGeneratedSourcesDirectory(project.file(querydslDir))
    }

    /**
     * 생성된 Q-클래스 까지 삭제.
     */
    clean {
        delete file(querydslDir)
    }

}